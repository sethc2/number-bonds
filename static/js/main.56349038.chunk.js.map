{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomInt","max","Math","floor","random","createNewProblem","total","first","second","randomGuess","group","blank","getAnswer","problem","App","useState","problemsCorrect","setProblemsCorrect","problemsWrong","setProblemsWrong","setMax","running","setRunning","currentProblem","setCurrentProblem","currentProblemAnswer","useMemo","lastAnswer","setLastAnswer","guesses","answer","answers","Set","add","giveUp","size","nextAnswer","Array","from","sort","a","b","getGuesses","begin","useCallback","getNextProblemSoon","window","setTimeout","answerProblem","Error","answerColor","problems","index","push","className","style","flex","margin","map","x","border","onClick","display","flexDirection","alignItems","justifyContent","color","fontWeight","fontSize","padding","minWidth","gridTemplateColumns","guess","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56349038.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport interface NumberGroup {\n  first: number;\n  second: number;\n  total: number;\n}\n\nexport interface Problem {\n  group: NumberGroup;\n  blank: keyof NumberGroup;\n}\n\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction createNewProblem(max: number): Problem {\n  const total = getRandomInt(max - 1) + 2;\n  const first = getRandomInt(total - 1) + 1;\n  const second = total - first;\n  const randomGuess = getRandomInt(3);\n  const blank: keyof NumberGroup =\n    randomGuess === 0 ? \"total\" : randomGuess === 1 ? \"first\" : \"second\";\n  return {\n    group: { total, first, second },\n    blank,\n  };\n}\n\nfunction getAnswer(problem: Problem) {\n  return problem.group[problem.blank];\n}\n\nfunction getGuesses(problem: Problem) {\n  const answer = getAnswer(problem);\n  const answers = new Set<number>();\n  answers.add(answer);\n  let giveUp = 100;\n  while (answers.size < 4 || giveUp <= 0) {\n    const nextAnswer = answer + (getRandomInt(8) - 4);\n    if (nextAnswer > 0) {\n      answers.add(nextAnswer);\n    }\n    giveUp--;\n  }\n  return Array.from(answers).sort((a, b) => a - b);\n}\n\nfunction App() {\n  const [problemsCorrect, setProblemsCorrect] = useState<Problem[]>([]);\n  const [problemsWrong, setProblemsWrong] = useState<Problem[]>([]);\n\n  const [max, setMax] = useState(15);\n\n  const [running, setRunning] = useState(false);\n\n  const [currentProblem, setCurrentProblem] = useState<Problem | null>();\n  const currentProblemAnswer = useMemo(\n    () => (currentProblem ? getAnswer(currentProblem) : null),\n    [currentProblem]\n  );\n  const [lastAnswer, setLastAnswer] = useState<number | null>(null);\n\n  const guesses = useMemo<number[] | null>(() => {\n    if (!currentProblem) {\n      return null;\n    }\n    return getGuesses(currentProblem);\n  }, [currentProblem]);\n\n  const begin = useCallback(() => {\n    setProblemsCorrect([]);\n    setProblemsWrong([]);\n    setCurrentProblem(createNewProblem(max));\n    setRunning(true);\n  }, [max]);\n\n  const getNextProblemSoon = useCallback(() => {\n    if (running) {\n      window.setTimeout(() => {\n        setLastAnswer(null);\n        setCurrentProblem(createNewProblem(max));\n      }, 2000);\n    }\n  }, [running]);\n\n  const answerProblem = useCallback(\n    (answer: number) => {\n      if (!currentProblem) {\n        throw new Error(\"Current problem must not be null\");\n      }\n      // if (lastAnswer === getAnswer(currentProblem)) {\n      //   throw new Error(\"already answered\");\n      // }\n      if (answer === currentProblemAnswer) {\n        if (!lastAnswer) {\n          setProblemsCorrect([...problemsCorrect, currentProblem]);\n        }\n        getNextProblemSoon();\n      } else {\n        if (!lastAnswer) {\n          setProblemsWrong([...problemsWrong, currentProblem]);\n        }\n      }\n      setLastAnswer(answer);\n    },\n    [problemsCorrect, problemsWrong, currentProblem, currentProblemAnswer]\n  );\n\n  const answerColor =\n    lastAnswer === null\n      ? \"black\"\n      : lastAnswer === currentProblemAnswer\n      ? \"green\"\n      : \"red\";\n\n  const problems: number[] = useMemo(() => {\n    let total: number[] = [];\n    for (let index = 8; index < 30; index++) {\n      total.push(index);\n    }\n    return total;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {false && <button onClick={() => setMax(15)}></button>}\n      {!currentProblem && (\n        <>\n          <div style={{ flex: 1, margin: 30 }}>\n            <div>Pick max number</div>\n            {problems.map((x) => (\n              <>\n                <button\n                  style={{\n                    border: x === max ? \"2px solid black\" : \"1px solid gray\",\n                  }}\n                  onClick={() => setMax(x)}\n                >\n                  {x}\n                </button>\n              </>\n            ))}\n          </div>\n          <div style={{ flex: 1 }}>\n            <button onClick={begin}>Begin</button>\n          </div>\n        </>\n      )}\n      {currentProblem && (\n        <div\n          style={{\n            flex: 2,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div\n            style={{\n              color: currentProblem.blank === \"total\" ? answerColor : \"black\",\n              fontWeight:\n                currentProblem.blank === \"total\" ? \"bolder\" : \"normal\",\n              fontSize: 36,\n              border: \"1px solid black\",\n              margin: 10,\n              padding: 10,\n            }}\n          >\n            <span>\n              {currentProblem.blank === \"total\"\n                ? lastAnswer !== null\n                  ? lastAnswer\n                  : \"?\"\n                : currentProblem.group.total}\n            </span>\n          </div>\n          <div\n            style={{\n              margin: 10,\n              padding: 10,\n            }}\n          >\n            <span\n              style={{\n                color: currentProblem.blank === \"first\" ? answerColor : \"black\",\n                fontWeight:\n                  currentProblem.blank === \"first\" ? \"bolder\" : \"normal\",\n                fontSize: 36,\n                border: \"1px solid black\",\n                minWidth: \"15%\",\n                margin: 10,\n                padding: 10,\n              }}\n            >\n              {currentProblem.blank === \"first\"\n                ? lastAnswer !== null\n                  ? lastAnswer\n                  : \"?\"\n                : currentProblem.group.first}\n            </span>\n            <span\n              style={{\n                color:\n                  currentProblem.blank === \"second\" ? answerColor : \"black\",\n                fontWeight:\n                  currentProblem.blank === \"second\" ? \"bolder\" : \"normal\",\n                fontSize: 36,\n                border: \"1px solid black\",\n                minWidth: \"15%\",\n                margin: 10,\n                padding: 10,\n              }}\n            >\n              {currentProblem.blank === \"second\"\n                ? lastAnswer !== null\n                  ? lastAnswer\n                  : \"?\"\n                : currentProblem.group.second}\n            </span>\n          </div>\n        </div>\n      )}\n      {guesses && currentProblem && (\n        <div\n          style={{ flex: 2, display: \"grid\", gridTemplateColumns: \"1fr 1fr\" }}\n        >\n          {guesses.map((guess) => (\n            <button\n              style={{\n                fontSize: 24,\n                // background:\n                //   lastAnswer === guess && lastAnswer === currentProblemAnswer\n                //     ? \"green\"\n                //     : lastAnswer === guess\n                //     ? \"red\"\n                //     : \"grey\",\n              }}\n              onClick={() => answerProblem(guess)}\n            >\n              {guess}\n            </button>\n          ))}\n        </div>\n      )}\n      {running && (\n        <div style={{ flex: 1 }}>\n          <div>Number correct: {problemsCorrect.length}</div>\n          <div>Number wrong: {problemsWrong.length}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}